{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "2a076fb2-ee80-47a1-b1e4-6af67a291b7a",
   "metadata": {
    "tags": []
   },
   "source": [
    "## Ukrainian Businesses adaptation to the beginning of the full scale war"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "b193e052-3f08-4b70-bd61-30755ab74aca",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import xml.etree.ElementTree as ET\n",
    "import mysql.connector\n",
    "import shutil"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "9b4afff2-f790-40f0-946d-49d19bdf8967",
   "metadata": {},
   "source": [
    "File Cleaning "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "2d060c61-8c05-43af-98b6-525bfc326bfe",
   "metadata": {},
   "outputs": [],
   "source": [
    "def clean_xml_files(directory):\n",
    "    for filename in os.listdir(directory):\n",
    "        if filename.endswith('.xml'):\n",
    "            file_path = os.path.join(directory, filename)\n",
    "            cleaned_content = \"\"\n",
    "            \n",
    "            with open(file_path, 'r', encoding='utf-8') as file:\n",
    "                xml_content = file.read()\n",
    "                start_index = xml_content.find('<DECLAR')\n",
    "                end_index = xml_content.find('</DECLAR>', start_index) + len('</DECLAR>')\n",
    "                \n",
    "                if start_index != -1 and end_index != -1:\n",
    "                    cleaned_content = xml_content[start_index:end_index]\n",
    "                    \n",
    "            with open(file_path, 'w', encoding='utf-8') as file:\n",
    "                file.write(cleaned_content)\n",
    "\n",
    "gdirectory = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2023\\F-2'\n",
    "clean_xml_files(directory)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1cb7145f-e343-43ee-aa26-5633736d8cd5",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Create database out of created xsd files"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "9718047c-7eff-42a1-a899-654901371671",
   "metadata": {},
   "outputs": [],
   "source": [
    "def parse_xsd(xsd_file):\n",
    "    # Parse the XSD file\n",
    "    tree = ET.parse(xsd_file)\n",
    "    root = tree.getroot()\n",
    "    \n",
    "    # Dictionary to store column names and data types\n",
    "    columns = {}\n",
    "    \n",
    "    # Iterate through elements in XSD\n",
    "    for element in root.iter():\n",
    "        # Check if element has a name and a type\n",
    "        if 'name' in element.attrib and 'type' in element.attrib:\n",
    "            # Extract column name and data type\n",
    "            column_name = element.attrib['name']\n",
    "            data_type = element.attrib['type']\n",
    "            columns[column_name] = data_type\n",
    "    \n",
    "    return columns\n",
    "\n",
    "# XSD file paths\n",
    "xsd_file_1 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\XSD\\schema1.xsd'\n",
    "xsd_file_2 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\XSD\\schema2.xsd'\n",
    "\n",
    "# Parse XSD files\n",
    "columns_1 = parse_xsd(xsd_file_1)\n",
    "columns_2 = parse_xsd(xsd_file_2)\n",
    "\n",
    "# Print extracted columns and data types\n",
    "print(\"Columns and Data Types from XSD File 1:\")\n",
    "for column, data_type in columns_1.items():\n",
    "    print(f\"{column}: {data_type}\")\n",
    "\n",
    "print(\"\\nColumns and Data Types from XSD File 2:\")\n",
    "for column, data_type in columns_2.items():\n",
    "    print(f\"{column}: {data_type}\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "30475aa0-97a9-4e24-b692-04faca16a29f",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Create table Balance based on XML"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "0a2945d2-3b25-4208-b2b1-cf2983f705d4",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_table_from_xml(xml_file, table_name):\n",
    "    # Parse the XML file\n",
    "    tree = ET.parse(xml_file)\n",
    "    root = tree.getroot()\n",
    "\n",
    "    # Connect to MySQL\n",
    "    try:\n",
    "        conn = mysql.connector.connect(\n",
    "            host=\"localhost\",\n",
    "            user=\"root\",\n",
    "            password=\"MDismydom22!\",\n",
    "            database=\"businesses_in_ukraine\"\n",
    "        )\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        # Create a dictionary to store column names and their data types\n",
    "        columns = {}\n",
    "\n",
    "        # Iterate over XML elements recursively to extract column names and types\n",
    "        traverse_xml_tree(root, columns)\n",
    "\n",
    "        # Construct the CREATE TABLE query\n",
    "        create_table_query = f\"CREATE TABLE `{table_name}` ({', '.join(f'`{column}` {data_type}' for column, data_type in columns.items())})\"\n",
    "\n",
    "        # Execute the CREATE TABLE query\n",
    "        cursor.execute(create_table_query)\n",
    "\n",
    "        # Commit changes and close connection\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        print(f\"Table '{table_name}' created successfully.\")\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error: {err}\")\n",
    "    finally:\n",
    "        if 'conn' in locals():\n",
    "            conn.close()\n",
    "\n",
    "def traverse_xml_tree(element, columns):\n",
    "    # Extract column names and data types from current element\n",
    "    if element.tag not in columns:\n",
    "        data_type = determine_data_type(element.text)\n",
    "        columns[element.tag] = data_type\n",
    "\n",
    "    # Recursively traverse child elements\n",
    "    for child in element:\n",
    "        traverse_xml_tree(child, columns)\n",
    "\n",
    "def determine_data_type(value):\n",
    "    # Determine the data type based on the value\n",
    "    if value is None:\n",
    "        return \"FLOAT\"\n",
    "    elif is_integer(value):\n",
    "        return \"FLOAT\"\n",
    "    elif is_float(value):\n",
    "        return \"FLOAT\"\n",
    "    elif len(value) > 255:\n",
    "        return \"TEXT\"\n",
    "    else:\n",
    "        return f\"VARCHAR({min(255, len(value))})\"\n",
    "\n",
    "def is_integer(value):\n",
    "    try:\n",
    "        int(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "\n",
    "def is_float(value):\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "        \n",
    "\n",
    "create_table_from_xml(r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\XSD\\F1-perfectXML.xml', \"Balance\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "275277e6-a71c-4cf5-9b97-2061603b99de",
   "metadata": {},
   "outputs": [],
   "source": [
    "import mysql.connector\n",
    "\n",
    "def delete_columns_starting_with_b(table_name):\n",
    "    try:\n",
    "        # Connect to MySQL\n",
    "        conn = mysql.connector.connect(\n",
    "            host=\"localhost\",\n",
    "            user=\"root\",\n",
    "            password=\"MDismydom22!\",\n",
    "            database=\"businesses_in_ukraine\"\n",
    "        )\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        # Get a list of all columns in the specified table\n",
    "        cursor.execute(f\"SHOW COLUMNS FROM `{table_name}`\")\n",
    "        columns = [column[0] for column in cursor.fetchall()]\n",
    "\n",
    "        # Iterate through columns and drop those starting with 'B'\n",
    "        for column in columns:\n",
    "            if column.startswith('B'):\n",
    "                cursor.execute(f\"ALTER TABLE `{table_name}` DROP COLUMN `{column}`\")\n",
    "\n",
    "        # Commit changes and close connection\n",
    "        conn.commit()\n",
    "        print(f\"Columns starting with 'B' deleted successfully from table '{table_name}'.\")\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error: {err}\")\n",
    "    finally:\n",
    "        if 'conn' in locals():\n",
    "            conn.close()\n",
    "\n",
    "# Example usage:\n",
    "delete_columns_starting_with_b(\"balance\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "840a5ca3-7cba-4ae4-b489-152bef59b694",
   "metadata": {
    "tags": []
   },
   "source": [
    "#### Create table Financial Results"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f1f3ec50-37e4-4f56-bb34-cf9e0d22249a",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xml.etree.ElementTree as ET\n",
    "import mysql.connector\n",
    "\n",
    "def create_table_from_xml(xml_file, table_name):\n",
    "    # Parse the XML file\n",
    "    tree = ET.parse(xml_file)\n",
    "    root = tree.getroot()\n",
    "\n",
    "    # Connect to MySQL\n",
    "    try:\n",
    "        conn = mysql.connector.connect(\n",
    "            host=\"localhost\",\n",
    "            user=\"root\",\n",
    "            password=\"MDismydom22!\",\n",
    "            database=\"businesses_in_ukraine\"\n",
    "        )\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        # Create a dictionary to store column names and their data types\n",
    "        columns = {}\n",
    "\n",
    "        # Iterate over XML elements recursively to extract column names and types\n",
    "        traverse_xml_tree(root, columns)\n",
    "\n",
    "        # Construct the CREATE TABLE query\n",
    "        create_table_query = f\"CREATE TABLE `{table_name}` ({', '.join(f'`{column}` {data_type}' for column, data_type in columns.items())})\"\n",
    "\n",
    "        # Execute the CREATE TABLE query\n",
    "        cursor.execute(create_table_query)\n",
    "\n",
    "        # Commit changes and close connection\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        print(f\"Table '{table_name}' created successfully.\")\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error: {err}\")\n",
    "    finally:\n",
    "        if 'conn' in locals():\n",
    "            conn.close()\n",
    "\n",
    "def traverse_xml_tree(element, columns):\n",
    "    # Extract column names and data types from current element\n",
    "    if element.tag not in columns:\n",
    "        data_type = determine_data_type(element.text)\n",
    "        columns[element.tag] = data_type\n",
    "\n",
    "    # Recursively traverse child elements\n",
    "    for child in element:\n",
    "        traverse_xml_tree(child, columns)\n",
    "\n",
    "def determine_data_type(value):\n",
    "    # Determine the data type based on the value\n",
    "    if value is None:\n",
    "        return \"TEXT\"\n",
    "    elif is_integer(value):\n",
    "        return \"INT\"\n",
    "    elif is_float(value):\n",
    "        return \"FLOAT\"\n",
    "    elif len(value) > 255:\n",
    "        return \"TEXT\"\n",
    "    else:\n",
    "        return f\"VARCHAR({min(255, len(value))})\"\n",
    "\n",
    "def is_integer(value):\n",
    "    try:\n",
    "        int(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "\n",
    "def is_float(value):\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "   \n",
    "        \n",
    "\n",
    "create_table_from_xml(r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2021\\F-2\\00012635_800060000012635S010021410000160122021.XML_2022-02-22 16_03_35.xml', \"fin_res\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "507ffa58-06a8-4644-a290-28e1ea98992f",
   "metadata": {
    "tags": []
   },
   "source": [
    "### EXPERIMENT "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "71154763-5537-4b41-a0cc-2d82d3a02b90",
   "metadata": {},
   "outputs": [],
   "source": [
    "def create_table_from_xml(xml_file, table_name):\n",
    "    # Parse the XML file\n",
    "    tree = ET.parse(xml_file)\n",
    "    root = tree.getroot()\n",
    "\n",
    "    # Connect to MySQL\n",
    "    try:\n",
    "        conn = mysql.connector.connect(\n",
    "            host=\"localhost\",\n",
    "            user=\"root\",\n",
    "            password=\"MDismydom22!\",\n",
    "            database=\"businesses_in_ukraine\"\n",
    "        )\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        # Create a dictionary to store column names and their data types\n",
    "        columns = {}\n",
    "\n",
    "        # Iterate over XML elements recursively to extract column names and types\n",
    "        traverse_xml_tree(root, columns)\n",
    "\n",
    "        # Construct the CREATE TABLE query\n",
    "        create_table_query = f\"CREATE TABLE `{table_name}` ({', '.join(f'`{column}` {data_type}' for column, data_type in columns.items())})\"\n",
    "\n",
    "        # Execute the CREATE TABLE query\n",
    "        cursor.execute(create_table_query)\n",
    "\n",
    "        # Commit changes and close connection\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        print(f\"Table '{table_name}' created successfully.\")\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error: {err}\")\n",
    "    finally:\n",
    "        if 'conn' in locals():\n",
    "            conn.close()\n",
    "\n",
    "def traverse_xml_tree(element, columns):\n",
    "    # Extract column names and data types from current element\n",
    "    if element.tag not in columns:\n",
    "        if not element.tag.startswith('B'):\n",
    "            data_type = determine_data_type(element.text)\n",
    "            columns[element.tag] = data_type\n",
    "\n",
    "    # Recursively traverse child elements\n",
    "    for child in element:\n",
    "        traverse_xml_tree(child, columns)\n",
    "\n",
    "def determine_data_type(value):\n",
    "    # Determine the data type based on the value\n",
    "    if value is None:\n",
    "        return \"FLOAT\"\n",
    "    elif is_integer(value):\n",
    "        return \"INT\"\n",
    "    elif is_float(value):\n",
    "        return \"FLOAT\"\n",
    "    elif len(value) > 255:\n",
    "        return \"TEXT\"\n",
    "    else:\n",
    "        return f\"VARCHAR({min(255, len(value))})\"\n",
    "\n",
    "def is_integer(value):\n",
    "    try:\n",
    "        int(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "\n",
    "def is_float(value):\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "        \n",
    "# Example usage:\n",
    "create_table_from_xml(r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\XSD\\F1-perfectXML.xml', \"Balance\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "f4b2cddd-7e57-4037-b97d-3b97fa9bf64b",
   "metadata": {},
   "source": [
    "Now create Financial Results "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "d24d58d9-b08e-4ecd-9af3-e2707e37255c",
   "metadata": {},
   "outputs": [],
   "source": [
    "import xml.etree.ElementTree as ET\n",
    "import mysql.connector\n",
    "\n",
    "def create_table_from_xml(xml_file, table_name):\n",
    "    # Parse the XML file\n",
    "    tree = ET.parse(xml_file)\n",
    "    root = tree.getroot()\n",
    "\n",
    "    # Connect to MySQL\n",
    "    try:\n",
    "        conn = mysql.connector.connect(\n",
    "            host=\"localhost\",\n",
    "            user=\"root\",\n",
    "            password=\"MDismydom22!\",\n",
    "            database=\"businesses_in_ukraine\"\n",
    "        )\n",
    "        cursor = conn.cursor()\n",
    "\n",
    "        # Create a dictionary to store column names and their data types\n",
    "        columns = {}\n",
    "\n",
    "        # Iterate over XML elements recursively to extract column names and types\n",
    "        traverse_xml_tree(root, columns)\n",
    "\n",
    "        # Construct the CREATE TABLE query\n",
    "        create_table_query = f\"CREATE TABLE `{table_name}` ({', '.join(f'`{column}` {data_type}' for column, data_type in columns.items())})\"\n",
    "\n",
    "        # Execute the CREATE TABLE query\n",
    "        cursor.execute(create_table_query)\n",
    "\n",
    "        # Commit changes and close connection\n",
    "        conn.commit()\n",
    "        conn.close()\n",
    "        print(f\"Table '{table_name}' created successfully.\")\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error: {err}\")\n",
    "    finally:\n",
    "        if 'conn' in locals():\n",
    "            conn.close()\n",
    "\n",
    "def traverse_xml_tree(element, columns):\n",
    "    # Extract column names and data types from current element\n",
    "    if element.tag not in columns:\n",
    "        if not element.tag.startswith('B'):\n",
    "            data_type = determine_data_type(element.text)\n",
    "            columns[element.tag] = data_type\n",
    "\n",
    "    # Recursively traverse child elements\n",
    "    for child in element:\n",
    "        traverse_xml_tree(child, columns)\n",
    "\n",
    "def determine_data_type(value):\n",
    "    # Determine the data type based on the value\n",
    "    if value is None:\n",
    "        return \"FLOAT\"\n",
    "    elif is_integer(value):\n",
    "        return \"FLOAT\"\n",
    "    elif is_float(value):\n",
    "        return \"FLOAT\"\n",
    "    elif len(value) > 255:\n",
    "        return \"TEXT\"\n",
    "    else:\n",
    "        return f\"VARCHAR(250)\"\n",
    "\n",
    "def is_integer(value):\n",
    "    try:\n",
    "        int(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "\n",
    "def is_float(value):\n",
    "    try:\n",
    "        float(value)\n",
    "        return True\n",
    "    except (ValueError, TypeError):\n",
    "        return False\n",
    "        \n",
    "create_table_from_xml(r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\XSD\\F2-perfectXML.xml', \"Fin_res\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ddfd18b-7366-4a6c-a1fe-62240eb5200e",
   "metadata": {
    "tags": []
   },
   "source": [
    "##### Import Data in Balance"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "dd9b31e3-df1e-4753-ac46-af38cc2d2a68",
   "metadata": {},
   "outputs": [],
   "source": [
    "import os\n",
    "import xml.etree.ElementTree as ET\n",
    "import mysql.connector\n",
    "\n",
    "# MySQL database connection parameters\n",
    "db_config = {\n",
    "    'user': 'root',\n",
    "    'password': 'MDismydom22!',\n",
    "    'host': 'localhost',\n",
    "    'database': 'businesses_in_ukraine'\n",
    "}\n",
    "\n",
    "\n",
    "def check_balance_record(cur, FIRM_EDRPOU, D_FILL, PERIOD_YEAR):\n",
    "    # Define the SQL query with parameters\n",
    "    sql_query = \"\"\"\n",
    "    SELECT \n",
    "        CASE \n",
    "            WHEN (\n",
    "                SELECT COUNT(*) \n",
    "                FROM balance b2 \n",
    "                WHERE b2.FIRM_EDRPOU = %s \n",
    "                    AND b2.PERIOD_YEAR = %s\n",
    "                    AND b2.D_FILL > %s\n",
    "            ) > 0 THEN -1\n",
    "            WHEN (\n",
    "                SELECT COUNT(*) \n",
    "                FROM balance b2 \n",
    "                WHERE b2.FIRM_EDRPOU = %s\n",
    "                    AND b2.PERIOD_YEAR = %s\n",
    "            ) = 0 THEN 2\n",
    "            ELSE 1\n",
    "        END AS result\n",
    "    \"\"\"\n",
    "\n",
    "    # Execute the SQL query with parameters\n",
    "    cur.execute(sql_query, (FIRM_EDRPOU, PERIOD_YEAR, D_FILL, FIRM_EDRPOU, PERIOD_YEAR))\n",
    "\n",
    "    # Fetch the result\n",
    "    result = cur.fetchone()\n",
    "\n",
    "    # Print the result\n",
    "    #if result:\n",
    "    #    print(result[0])\n",
    "    #else:\n",
    "    #    print(\"No result found.\")\n",
    "    \n",
    "    # Close cursor and connection\n",
    "\n",
    "    return result[0]\n",
    "\n",
    "# Call the function with your FIRM_EDRPOU and D_FILL values\n",
    "# check_balance_record(\"your_FIRM_EDRPOU_value\", \"your_D_FILL_value\")\n",
    "\n",
    "\n",
    "def change_date_format(date_str, mtype, b=1):\n",
    "    # Assuming date_str is in the format DDMMYYYY\n",
    "    if mtype == 'MY_DATE':\n",
    "        day = date_str[:2]\n",
    "        month = date_str[2:4]\n",
    "        year = date_str[4:]\n",
    "        # Concatenate in the format YYYYMMDD\n",
    "        if b==1: \n",
    "            new_date_str = year + month + day\n",
    "            return new_date_str\n",
    "        else:\n",
    "            year = int(year)-1\n",
    "            new_date_str = str(year) + month + day\n",
    "            return new_date_str\n",
    "    elif mtype == 'PERIOD_YEAR':\n",
    "        if b==1: \n",
    "            return date_str\n",
    "        else: \n",
    "            return str(int(date_str)-1)\n",
    "        \n",
    "    else:\n",
    "        return date_str\n",
    "\n",
    "\n",
    "# Function to import data from XML file to MySQL\n",
    "def import_xml_to_mysql(xml_folder, table_name):\n",
    "    # Connect to MySQL database\n",
    "    try:\n",
    "        conn = mysql.connector.connect(**db_config)\n",
    "        cursor = conn.cursor()\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error connecting to MySQL: {err}\")\n",
    "        return\n",
    "\n",
    "    # Iterate through each XML file in the folder\n",
    "    for filename in os.listdir(xml_folder):\n",
    "        if filename.endswith('.xml'):\n",
    "            xml_path = os.path.join(xml_folder, filename)\n",
    "            try:\n",
    "                for i in range(1, 3):\n",
    "\n",
    "                    tree = ET.parse(xml_path)\n",
    "                    root = tree.getroot()\n",
    "                    \n",
    "\n",
    "                    # Construct SQL INSERT statement\n",
    "                    if i == 1:\n",
    "                        columns  = [child.tag for child in root.find('DECLARBODY') if not(child.tag.startswith('B'))]\n",
    "                        PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                        PERIOD_YEAR = str(int(PERIOD_YEAR)-1)\n",
    "                    else:\n",
    "                        columns  = [child.tag for child in root.find('DECLARBODY') if not(child.tag.startswith('A'))]\n",
    "                        PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                        \n",
    "                    columns2  =[child.tag for child in root.find('DECLARHEAD') ]\n",
    "                    placeholders = ', '.join(['%s' for _ in range(len(columns+columns2)+1)])\n",
    "                    #query = f\"INSERT INTO {table_name} ({', '.join(columns+columns2)}) VALUES ({placeholders})\"\n",
    "                    # ['A' + col[1:] if col.startswith('B') else col for col in columns]\n",
    "                    FIRM_EDRPOU = root.find('DECLARBODY').find(\"FIRM_EDRPOU\").text.strip()\n",
    "                    # PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                    # if i == 1:\n",
    "                    #     ID_YEAR = FIRM_EDRPOU + str(int(PERIOD_YEAR)-1)\n",
    "                    # else:\n",
    "                    #     ID_YEAR = FIRM_EDRPOU + PERIOD_YEAR\n",
    "                    \n",
    "                    ID_YEAR = FIRM_EDRPOU + PERIOD_YEAR\n",
    "                    \n",
    "                    data  = [change_date_format(root.find('DECLARBODY').find(col).text,col,i-1) for col in columns]+[change_date_format(root.find('DECLARHEAD').find(col).text,col,i-1) for col in columns2]\n",
    "                   \n",
    "                    \n",
    "                    # print(root.find('DECLARBODY').find(\"FIRM_EDRPOU\").text)\n",
    "                    \n",
    "                    \n",
    "                        \n",
    "                        \n",
    "                    \n",
    "                    #print(ID_YEAR)\n",
    "                    r_find = check_balance_record(cursor, FIRM_EDRPOU, root.find('DECLARHEAD').find(\"D_FILL\").text, PERIOD_YEAR)\n",
    "                    #print(r_find)\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    if r_find == 2:\n",
    "                        query = f\"INSERT INTO  {table_name} (id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders})\"\n",
    "                    elif r_find == 1:\n",
    "                        query = f\"REPLACE INTO {table_name} (id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders})\" # WHERE FIRM_EDRPOU = '{FIRM_EDRPOU}' AND PERIOD_YEAR = {PERIOD_YEAR}\"\n",
    "                    else:\n",
    "                        continue\n",
    "                        \n",
    "#                     if r_find == 1: #Update\n",
    "#                         func = \"REPLACE INTO\"\n",
    "#                         func2 = \"\"#SET\n",
    "#                         func3 = \"\"#f\"WHERE FIRM_EDRPOU = {FIRM_EDRPOU} AND PERIOD_YEAR = {PERIOD_YEAR}\"\n",
    "#                     elif r_find == 2: # Insert \n",
    "#                         func = \"INSERT INTO\"\n",
    "#                         func2 = \"\"\n",
    "#                         func3 = \"\"\n",
    "#                     else: \n",
    "#                         continue\n",
    "                    \n",
    "                    \n",
    "#                     query = f\" {func} {table_name} {func2} ( id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders}) {func3}\"\n",
    "#                     #if r_find == 1: \n",
    "\n",
    "\n",
    "                    #print(query)\n",
    "\n",
    "                    # Extract data from XML and insert into database\n",
    "                    #if i == 1:\n",
    "                     #else:\n",
    "                     #   data  = [change_date_format(root.find('DECLARBODY').find(col).text,col) for col in columns]+[change_date_format(root.find('DECLARHEAD').find(col).text,col) for col in columns2]\n",
    "                    #print(data)\n",
    "                    cursor.execute(query, [ID_YEAR]+data)\n",
    "\n",
    "                    conn.commit()\n",
    "                    #print(f\"Data from {filename} imported successfully.\")\n",
    "                    \n",
    "            except Exception as e:\n",
    "                print(f\"Error importing data from {filename}: {e}\")\n",
    "            \n",
    "            #break\n",
    "    # Close MySQL connection\n",
    "    cursor.close()\n",
    "    conn.close()\n",
    "\n",
    "# Example usage\n",
    "xml_folder_path_2021 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2021\\F-1'\n",
    "xml_folder_path_2022 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2022\\F-1'\n",
    "xml_folder_path_2023 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2023\\F-1'\n",
    "table_name = 'balance'\n",
    "\n",
    "import_xml_to_mysql(xml_folder_path_2021, table_name) \n",
    "print('2021 done')\n",
    "import_xml_to_mysql(xml_folder_path_2022, table_name)\n",
    "print('2022 done')\n",
    "import_xml_to_mysql(xml_folder_path_2023, table_name)\n",
    "print('2023 done')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "33cb91c1-9190-4bd7-9e9d-8b8d6f8e69d0",
   "metadata": {
    "tags": []
   },
   "source": [
    "##### Import Data into fin rez"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f570d949-408a-4b24-aced-ae1c63811219",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Error importing data from 14271990_730060014271990S010021410000002122021.XML_2022-08-19 11_13_02.xml: 1062 (23000): Duplicate entry '142719902020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 20898629_480080020898629S010021410000015122021.XML_2022-12-14 15_22_20.xml: 1062 (23000): Duplicate entry '208986292020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30155244_120120030155244S010021410000325122021.XML_2022-02-23 16_17_19.xml: 1062 (23000): Duplicate entry '301552442020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31927542_800100031927542S010021410000002122021.XML_2022-07-25 09_24_11.xml: 1062 (23000): Duplicate entry '319275422020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32230899_740020032230899S010021410000006122021.XML_2022-02-11 08_54_32.xml: 1062 (23000): Duplicate entry '322308992020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32230899_740020032230899S010021410000007122021.XML_2022-02-14 18_54_51.xml: 1062 (23000): Duplicate entry '322308992020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32550643_710060032550643S010021410000003122021.XML_2022-02-21 16_50_30.xml: 1062 (23000): Duplicate entry '325506432020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32657310_800090032657310S010021410000110122021.XML_2022-06-10 10_39_33.xml: 1062 (23000): Duplicate entry '326573102020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33450915_260060033450915S010021410000002122021.XML_2022-09-12 22_22_53.xml: 1062 (23000): Duplicate entry '334509152020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33731604_070020033731604S010021410000004122021.XML_2022-07-01 11_28_26.xml: 1062 (23000): Duplicate entry '337316042020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34239909_800060034239909S010021410000002122021.XML_2022-02-22 11_29_02.xml: 'NoneType' object has no attribute 'text'\n",
      "Error importing data from 34239909_800060034239909S010021410000003122021.XML_2022-02-22 13_34_48.xml: 'NoneType' object has no attribute 'text'\n",
      "Error importing data from 34239909_800060034239909S010021410000004122021.XML_2022-02-22 14_14_57.xml: 'NoneType' object has no attribute 'text'\n",
      "Error importing data from 34239909_800060034239909S010021410000005122021.XML_2022-02-22 14_29_35.xml: 'NoneType' object has no attribute 'text'\n",
      "Error importing data from 35298787_140020035298787S010021410000005122021.XML_2022-03-05 15_56_35.xml: 1062 (23000): Duplicate entry '352987872020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40471729_050040040471729S010021410000006122021.XML_2022-10-28 11_19_17.xml: 1062 (23000): Duplicate entry '404717292020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43192353_320080043192353S010021410000003122021.XML_2024-01-22 12_18_43.xml: 1062 (23000): Duplicate entry '431923532020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43929307_530080043929307S010021410000004122021.XML_2022-03-31 12_11_47.xml: 1062 (23000): Duplicate entry '439293072020' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44336246_510100044336246S010021410000001122021.XML_2022-02-15 09_10_20.xml: 1406 (22001): Data too long for column 'FIRM_NAME' at row 1\n",
      "2021 done\n",
      "Error importing data from 05696963_730060005696963S010021410000001122022.XML_2024-02-26 13_01_03.xml: 1062 (23000): Duplicate entry '056969632021' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43905087_510040043905087S010021410000003122022.XML_2024-01-26 13_57_25.xml: 1062 (23000): Duplicate entry '439050872022' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43905087_510040043905087S010021410000004122022.XML_2024-02-13 11_54_05.xml: 1062 (23000): Duplicate entry '439050872022' for key 'fin_res.PRIMARY'\n",
      "2022 done\n",
      "Error importing data from 00151644_800040000151644S010021410000415122023.XML_2024-02-27 09_34_35.xml: 1062 (23000): Duplicate entry '001516442023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00196204_230060000196204S010021410007983122023.XML_2024-03-14 09_02_15.xml: 1062 (23000): Duplicate entry '001962042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00196204_230060000196204S010021410007987122023.XML_2024-03-29 15_02_47.xml: 1062 (23000): Duplicate entry '001962042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00307313_800090000307313S010021410000522122023.XML_2024-02-29 07_25_20.xml: 1062 (23000): Duplicate entry '003073132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00372109_350080000372109S010021410001426122023.XML_2024-02-28 14_29_35.xml: 1062 (23000): Duplicate entry '003721092023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00373735_680020000373735S010021410000198122023.XML_2024-03-08 17_06_33.xml: 1062 (23000): Duplicate entry '003737352023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00554514_120020000554514S010021410000700122023.XML_2024-02-29 11_41_46.xml: 1062 (23000): Duplicate entry '005545142023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00659101_120020000659101S010021410000057122023.XML_2024-03-25 11_29_20.xml: 1062 (23000): Duplicate entry '006591012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00688321_800060000688321S010021410000130122023.XML_2024-02-28 16_24_34.xml: 1062 (23000): Duplicate entry '006883212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00708331_630040000708331S010021410000347122023.XML_2024-02-26 14_01_12.xml: 1062 (23000): Duplicate entry '007083312023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 00993277_650020000993277S010021410000015122023.XML_2024-02-28 22_54_53.xml: 1062 (23000): Duplicate entry '009932772023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01388420_120020001388420S010021410000232122023.XML_2024-02-27 13_44_32.xml: 1062 (23000): Duplicate entry '013884202023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01554278_460060001554278S010021410000049122023.XML_2024-02-19 10_58_00.xml: 1062 (23000): Duplicate entry '015542782023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01554278_460060001554278S010021410000054122023.XML_2024-02-22 11_31_09.xml: 1062 (23000): Duplicate entry '015542782023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01554278_460060001554278S010021410000059122023.XML_2024-03-20 14_15_26.xml: 1062 (23000): Duplicate entry '015542782023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01554278_460060001554278S010021410000064122023.XML_2024-03-27 15_30_35.xml: 1062 (23000): Duplicate entry '015542782023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01999052_510100001999052S010021410000065122023.XML_2024-01-25 10_14_08.xml: 1062 (23000): Duplicate entry '019990522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 01999052_510100001999052S010021410000073122023.XML_2024-01-31 15_26_34.xml: 1062 (23000): Duplicate entry '019990522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 02403446_800040002403446S010021410000155122023.XML_2024-02-28 14_25_12.xml: 1062 (23000): Duplicate entry '024034462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 02403446_800040002403446S010021410000169122023.XML_2024-03-21 09_47_17.xml: 1062 (23000): Duplicate entry '024034462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 02649437_530060002649437S010021410000935122023.XML_2024-02-16 16_52_10.xml: 1062 (23000): Duplicate entry '026494372023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 03745025_180040003745025S010021410000420122023.XML_2024-03-22 09_39_48.xml: 1062 (23000): Duplicate entry '037450252023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 03769296_510100003769296S010021410000162122023.XML_2024-03-04 18_05_56.xml: 1062 (23000): Duplicate entry '037692962023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 05287868_320060005287868S010021410000266122023.XML_2024-02-28 10_23_42.xml: 1062 (23000): Duplicate entry '052878682023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 05287868_320060005287868S010021410000292122023.XML_2024-03-14 15_56_59.xml: 1062 (23000): Duplicate entry '052878682023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 05414775_800010005414775S010021410000104122023.XML_2024-03-15 09_19_49.xml: 1062 (23000): Duplicate entry '054147752023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 05448389_120080005448389S010021410000334122023.XML_2024-03-27 10_30_18.xml: 1062 (23000): Duplicate entry '054483892023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 05479361_050020005479361S010021410003551122023.XML_2024-03-12 14_10_48.xml: 1062 (23000): Duplicate entry '054793612023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 07620094_180040007620094S010021410000495122023.XML_2024-03-21 15_37_36.xml: 1062 (23000): Duplicate entry '076200942023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 08029701_070080008029701S010021410000099122023.XML_2024-02-29 17_01_42.xml: 1062 (23000): Duplicate entry '080297012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 08029701_070080008029701S010021410000150122023.XML_2024-03-22 15_30_45.xml: 1062 (23000): Duplicate entry '080297012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 08029701_070080008029701S010021410000155122023.XML_2024-03-22 16_45_38.xml: 1062 (23000): Duplicate entry '080297012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 13568156_180060013568156S010021410001709122023.XML_2024-02-22 14_41_34.xml: 1062 (23000): Duplicate entry '135681562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 13568156_180060013568156S010021410001714122023.XML_2024-02-22 15_26_47.xml: 1062 (23000): Duplicate entry '135681562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 13568156_180060013568156S010021410001735122023.XML_2024-03-22 15_40_58.xml: 1062 (23000): Duplicate entry '135681562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 14073675_800100014073675S010021410000002122023.XML_2024-02-29 16_07_07.xml: 1062 (23000): Duplicate entry '140736752023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 14136795_650100014136795S010021410000120122023.XML_2024-03-29 21_28_46.xml: 1062 (23000): Duplicate entry '141367952023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 14310052_630120014310052S010021410001246122023.XML_2024-02-27 18_19_06.xml: 1062 (23000): Duplicate entry '143100522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 14312329_710080014312329S010021410000060122023.XML_2024-03-07 14_13_21.xml: 1062 (23000): Duplicate entry '143123292023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 20072763_320060020072763S010021410000104122023.XML_2024-02-29 17_53_07.xml: 1062 (23000): Duplicate entry '200727632023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 20075951_800060020075951S010021410000141122023.XML_2024-02-28 09_59_20.xml: 1062 (23000): Duplicate entry '200759512023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 21235629_630020021235629S010021410000095122023.XML_2024-02-29 21_17_52.xml: 1062 (23000): Duplicate entry '212356292023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 21235629_630020021235629S010021410000100122023.XML_2024-02-29 21_37_17.xml: 1062 (23000): Duplicate entry '212356292023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 21551365_800050021551365S010021410000007122023.XML_2024-02-29 16_01_41.xml: 1062 (23000): Duplicate entry '215513652023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 21552117_800020021552117S010021410001739122023.XML_2024-03-22 13_45_26.xml: 1062 (23000): Duplicate entry '215521172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 22498549_510040022498549S010021410000002122023.XML_2024-01-24 18_21_21.xml: 1062 (23000): Duplicate entry '224985492023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 22498549_510040022498549S010021410000004122023.XML_2024-02-06 20_36_30.xml: 1062 (23000): Duplicate entry '224985492023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 23602486_800100023602486S010021410000013122023.XML_2024-02-21 13_22_08.xml: 1062 (23000): Duplicate entry '236024862023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24364528_800060024364528S010021410000131122023.XML_2024-03-21 17_02_57.xml: 1062 (23000): Duplicate entry '243645282023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24533343_510100024533343S010021410000684122023.XML_2024-03-05 17_19_29.xml: 1062 (23000): Duplicate entry '245333432023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24533343_510100024533343S010021410000689122023.XML_2024-03-06 12_44_57.xml: 1062 (23000): Duplicate entry '245333432023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24576213_800060024576213S010021410000024122023.XML_2024-02-26 17_31_29.xml: 1062 (23000): Duplicate entry '245762132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24797049_480080024797049S010021410000178122023.XML_2024-02-28 20_44_53.xml: 1062 (23000): Duplicate entry '247970492023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24797049_480080024797049S010021410000206122023.XML_2024-03-22 10_55_01.xml: 1062 (23000): Duplicate entry '247970492023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 24797049_480080024797049S010021410000212122023.XML_2024-03-22 14_05_48.xml: 1062 (23000): Duplicate entry '247970492023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 25947551_710080025947551S010021410000073122023.XML_2024-02-28 11_54_21.xml: 1062 (23000): Duplicate entry '259475512023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 26582293_320120026582293S010021410000005122023.XML_2024-01-26 09_34_26.xml: 1062 (23000): Duplicate entry '265822932022' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30001532_120060030001532S010021410000700122023.XML_2024-02-28 17_00_49.xml: 1062 (23000): Duplicate entry '300015322023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30333892_480060030333892S010021410000217122023.XML_2024-03-01 17_01_49.xml: 1062 (23000): Duplicate entry '303338922023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30382397_800010030382397S010021410000488122023.XML_2024-02-13 14_09_49.xml: 1062 (23000): Duplicate entry '303823972023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30382397_800010030382397S010021410000493122023.XML_2024-02-14 15_35_09.xml: 1062 (23000): Duplicate entry '303823972023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30449042_510100030449042S010021410000001122023.XML_2024-01-30 10_15_42.xml: 1062 (23000): Duplicate entry '304490422022' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30453389_050020030453389S010021410000005122023.XML_2024-03-12 10_11_05.xml: 1062 (23000): Duplicate entry '304533892023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30550039_800080030550039S010021410000180122023.XML_2024-03-18 12_54_43.xml: 1062 (23000): Duplicate entry '305500392023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30565129_480060030565129S010021410000629122023.XML_2024-02-27 10_24_16.xml: 1062 (23000): Duplicate entry '305651292023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30712821_630120030712821S010021410000179122023.XML_2024-03-18 01_53_04.xml: 1062 (23000): Duplicate entry '307128212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30750980_630120030750980S010021430000001122023.XML_2024-03-25 15_04_10.xml: 1062 (23000): Duplicate entry '307509802023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30750980_630120030750980S010021430000002122023.XML_2024-04-01 13_09_22.xml: 1062 (23000): Duplicate entry '307509802023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30922208_120020030922208S010021410000652122023.XML_2024-03-11 15_04_45.xml: 1062 (23000): Duplicate entry '309222082023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 30981499_560040030981499S010021410000439122023.XML_2024-02-29 09_46_50.xml: 1062 (23000): Duplicate entry '309814992023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31037994_800070031037994S010021410003756122023.XML_2024-02-24 15_56_51.xml: 1062 (23000): Duplicate entry '310379942023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31333288_710080031333288S010021410000676122023.XML_2024-01-10 19_34_58.xml: 1062 (23000): Duplicate entry '313332882023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31333288_710080031333288S010021410000693122023.XML_2024-02-28 15_49_24.xml: 1062 (23000): Duplicate entry '313332882023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31747429_530060031747429S010021410001062122023.XML_2024-02-29 09_50_41.xml: 1062 (23000): Duplicate entry '317474292023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 31774943_350040031774943S010021410000040122023.XML_2024-02-29 14_10_11.xml: 1062 (23000): Duplicate entry '317749432023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32252797_800070032252797S010021410001151122023.XML_2024-02-29 19_22_23.xml: 1062 (23000): Duplicate entry '322527972023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 32484843_800060032484843S010021410000022122023.XML_2024-02-23 14_08_06.xml: 1062 (23000): Duplicate entry '324848432023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33134452_230060033134452S010021410000034122023.XML_2024-02-28 05_12_34.xml: 1062 (23000): Duplicate entry '331344522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33134452_230060033134452S010021410000038122023.XML_2024-02-28 15_09_50.xml: 1062 (23000): Duplicate entry '331344522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33134452_230060033134452S010021410000042122023.XML_2024-02-28 15_59_23.xml: 1062 (23000): Duplicate entry '331344522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33134452_230060033134452S010021410000046122023.XML_2024-02-28 18_34_14.xml: 1062 (23000): Duplicate entry '331344522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33644098_180040033644098S010021410000523122023.XML_2024-02-29 17_12_22.xml: 1062 (23000): Duplicate entry '336440982023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000079122023.XML_2024-02-28 10_54_30.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000083122023.XML_2024-02-28 12_04_00.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000087122023.XML_2024-02-28 12_13_31.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000091122023.XML_2024-02-28 13_54_58.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000095122023.XML_2024-02-28 15_19_48.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000099122023.XML_2024-02-29 10_46_17.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000103122023.XML_2024-02-29 12_31_30.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33718756_120020033718756S010021410000111122023.XML_2024-02-29 14_31_02.xml: 1062 (23000): Duplicate entry '337187562023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33734191_650080033734191S010021410002202122023.XML_2024-03-22 17_00_21.xml: 1062 (23000): Duplicate entry '337341912023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 33857158_120020033857158S010021410000509122023.XML_2024-03-26 15_16_02.xml: 1062 (23000): Duplicate entry '338571582023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34046446_800070034046446S010021410000036122023.XML_2024-02-29 14_04_58.xml: 1062 (23000): Duplicate entry '340464462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34050625_180040034050625S010021410000007122023.XML_2024-02-29 15_31_22.xml: 1062 (23000): Duplicate entry '340506252023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34502350_440120034502350S010021410000148122023.XML_2024-02-28 23_20_45.xml: 1062 (23000): Duplicate entry '345023502023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34693586_630120034693586S010021410000063122023.XML_2024-02-26 22_56_40.xml: 1062 (23000): Duplicate entry '346935862023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34693586_630120034693586S010021410000067122023.XML_2024-02-26 23_56_46.xml: 1062 (23000): Duplicate entry '346935862023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34817341_800060034817341S010021410001469122023.XML_2024-02-28 14_44_18.xml: 1062 (23000): Duplicate entry '348173412023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34916617_120020034916617S010021410000139122023.XML_2024-02-19 15_33_45.xml: 1062 (23000): Duplicate entry '349166172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34916617_120020034916617S010021410000143122023.XML_2024-02-20 10_34_22.xml: 1062 (23000): Duplicate entry '349166172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34916617_120020034916617S010021410000147122023.XML_2024-02-20 19_14_15.xml: 1062 (23000): Duplicate entry '349166172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34916617_120020034916617S010021410000153122023.XML_2024-03-14 09_31_54.xml: 1062 (23000): Duplicate entry '349166172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 34916617_120020034916617S010021410000157122023.XML_2024-03-14 10_21_52.xml: 1062 (23000): Duplicate entry '349166172023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 35212563_050020035212563S010021410089748122023.XML_2024-02-05 15_13_45.xml: 1062 (23000): Duplicate entry '352125632023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 35321463_510100035321463S010021410000049122023.XML_2024-02-09 11_38_54.xml: 1062 (23000): Duplicate entry '353214632023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 35477315_630120035477315S010021410000031122023.XML_2024-02-29 16_43_15.xml: 1062 (23000): Duplicate entry '354773152023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 35533730_630120035533730S010021410001172122023.XML_2024-02-29 14_22_13.xml: 1062 (23000): Duplicate entry '355337302023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36020648_120080036020648S010021410000807122023.XML_2024-02-27 14_39_37.xml: 1062 (23000): Duplicate entry '360206482023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36049009_800010036049009S010021410000095122023.XML_2024-02-29 18_36_22.xml: 1062 (23000): Duplicate entry '360490092023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36142801_480060036142801S010021410000244122023.XML_2024-03-01 19_47_19.xml: 1062 (23000): Duplicate entry '361428012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36142801_480060036142801S010021410000251122023.XML_2024-03-06 10_25_09.xml: 1062 (23000): Duplicate entry '361428012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36142801_480060036142801S010021410000261122023.XML_2024-03-18 18_52_02.xml: 1062 (23000): Duplicate entry '361428012023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36273889_800090036273889S010021410000004122023.XML_2024-02-29 21_17_43.xml: 1062 (23000): Duplicate entry '362738892023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36279482_740080036279482S010021410000140122023.XML_2024-03-12 16_21_24.xml: 1062 (23000): Duplicate entry '362794822023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36299247_460040036299247S010021410000006122023.XML_2024-02-05 20_20_04.xml: 1062 (23000): Duplicate entry '362992472022' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36375207_630140036375207S010021410000014122023.XML_2024-02-28 20_24_54.xml: 1062 (23000): Duplicate entry '363752072023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36423868_800060036423868S010021410000107122023.XML_2024-02-29 09_57_07.xml: 1062 (23000): Duplicate entry '364238682023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36505270_650100036505270S010021410000025122023.XML_2024-02-06 12_16_32.xml: 1062 (23000): Duplicate entry '365052702023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36570265_730060036570265S010021410033743122023.XML_2024-02-29 14_18_12.xml: 1062 (23000): Duplicate entry '365702652023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 36798085_800090036798085S010021410000079122023.XML_2024-02-29 19_53_07.xml: 1062 (23000): Duplicate entry '367980852023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37260027_180040037260027S010021410000440122023.XML_2024-03-15 17_55_29.xml: 1062 (23000): Duplicate entry '372600272023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37670844_800020037670844S010021410000166122023.XML_2024-02-28 20_25_25.xml: 1062 (23000): Duplicate entry '376708442023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37766028_630120037766028S010021410000222122023.XML_2024-03-18 14_04_58.xml: 1062 (23000): Duplicate entry '377660282023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37770013_800060037770013S010021410000002122023.XML_2024-02-27 18_24_18.xml: 1062 (23000): Duplicate entry '377700132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37770013_800060037770013S010021410000003122023.XML_2024-02-28 17_54_47.xml: 1062 (23000): Duplicate entry '377700132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37770013_800060037770013S010021410000253122023.XML_2024-02-22 13_40_19.xml: 1062 (23000): Duplicate entry '377700132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 37770013_800060037770013S010021410000261122023.XML_2024-02-27 11_29_34.xml: 1062 (23000): Duplicate entry '377700132023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38064343_050020038064343S010021410001083122023.XML_2024-03-08 12_35_43.xml: 1062 (23000): Duplicate entry '380643432023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38519070_800100038519070S010021410000003122023.XML_2024-02-13 11_14_13.xml: 1062 (23000): Duplicate entry '385190702023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38530114_120020038530114S010021410000230122023.XML_2024-02-29 15_30_57.xml: 1062 (23000): Duplicate entry '385301142023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38727330_800060038727330S010021410000002122023.XML_2024-02-27 15_44_23.xml: 1062 (23000): Duplicate entry '387273302023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38727330_800060038727330S010021410000003122023.XML_2024-02-27 15_44_15.xml: 1062 (23000): Duplicate entry '387273302023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38727330_800060038727330S010021410000241122023.XML_2024-02-20 18_19_50.xml: 1062 (23000): Duplicate entry '387273302023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 38727330_800060038727330S010021410000265122023.XML_2024-02-28 17_00_13.xml: 1062 (23000): Duplicate entry '387273302023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000467122023.XML_2024-02-19 10_47_52.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000471122023.XML_2024-02-19 10_58_00.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000475122023.XML_2024-02-19 11_08_12.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000483122023.XML_2024-02-19 11_18_16.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000487122023.XML_2024-02-19 12_03_41.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000491122023.XML_2024-02-19 12_40_02.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000495122023.XML_2024-02-19 12_55_41.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000499122023.XML_2024-02-19 13_10_19.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000503122023.XML_2024-02-19 13_15_50.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000555122023.XML_2024-02-20 13_53_41.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000559122023.XML_2024-02-20 13_48_15.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000563122023.XML_2024-02-20 13_48_06.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000567122023.XML_2024-02-20 13_48_11.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000571122023.XML_2024-02-20 13_43_32.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000575122023.XML_2024-02-20 13_43_28.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000579122023.XML_2024-02-20 13_48_06.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000583122023.XML_2024-02-20 13_43_29.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000587122023.XML_2024-02-20 13_37_56.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000591122023.XML_2024-02-20 13_38_03.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000595122023.XML_2024-02-20 13_59_07.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39134704_800090039134704S010021410000599122023.XML_2024-02-20 16_32_04.xml: 1062 (23000): Duplicate entry '391347042023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 39184446_800060039184446S010021410001697122023.XML_2024-02-23 13_32_28.xml: 1062 (23000): Duplicate entry '391844462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40071391_800080040071391S010021410000711122023.XML_2024-02-27 12_29_05.xml: 1062 (23000): Duplicate entry '400713912023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40121452_800100040121452S010021410000401122023.XML_2024-03-15 15_50_46.xml: 1062 (23000): Duplicate entry '401214522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40121452_800100040121452S010021410000403122023.XML_2024-03-15 16_00_52.xml: 1062 (23000): Duplicate entry '401214522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40121452_800100040121452S010021410000408122023.XML_2024-03-20 10_51_15.xml: 1062 (23000): Duplicate entry '401214522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40385546_230060040385546S010021410008186122023.XML_2024-02-29 15_26_21.xml: 1062 (23000): Duplicate entry '403855462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40398052_800010040398052S010021410001947122023.XML_2024-02-29 21_32_22.xml: 1062 (23000): Duplicate entry '403980522023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40506028_120020040506028S010021410000163122023.XML_2024-02-20 11_14_48.xml: 1062 (23000): Duplicate entry '405060282023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40625372_800070040625372S010021410000446122023.XML_2024-03-13 18_15_59.xml: 1062 (23000): Duplicate entry '406253722023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40905414_740100040905414S010021410000184122023.XML_2024-02-26 13_05_45.xml: 1062 (23000): Duplicate entry '409054142023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40905414_740100040905414S010021410000193122023.XML_2024-02-29 17_56_44.xml: 1062 (23000): Duplicate entry '409054142023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40909251_800100040909251S010021410000062122023.XML_2024-02-29 11_11_33.xml: 1062 (23000): Duplicate entry '409092512023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40944521_120100040944521S010021410000266122023.XML_2024-02-29 19_06_33.xml: 1062 (23000): Duplicate entry '409445212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40968046_800050040968046S010021410000160122023.XML_2024-02-28 13_38_31.xml: 1062 (23000): Duplicate entry '409680462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40968046_800050040968046S010021410000165122023.XML_2024-02-28 18_30_10.xml: 1062 (23000): Duplicate entry '409680462023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 40993322_800080040993322S010021410000255122023.XML_2024-02-29 17_47_05.xml: 1062 (23000): Duplicate entry '409933222023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 41101091_260040041101091S010021410000926122023.XML_2024-03-22 14_55_34.xml: 1062 (23000): Duplicate entry '411010912023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 41495321_480020041495321S010021410002168122023.XML_2024-03-19 10_43_18.xml: 1062 (23000): Duplicate entry '414953212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 41495321_480020041495321S010021410002181122023.XML_2024-03-22 14_30_40.xml: 1062 (23000): Duplicate entry '414953212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 41495321_480020041495321S010021410002194122023.XML_2024-03-29 10_22_41.xml: 1062 (23000): Duplicate entry '414953212023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 41752220_800060041752220S010021410000151122023.XML_2024-02-29 22_07_31.xml: 1062 (23000): Duplicate entry '417522202023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 42286157_350040042286157S010021410000259122023.XML_2024-02-27 10_54_14.xml: 1062 (23000): Duplicate entry '422861572023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 42286157_350040042286157S010021410000264122023.XML_2024-02-29 14_14_59.xml: 1062 (23000): Duplicate entry '422861572023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 42568264_800070042568264S010021410000429122023.XML_2024-02-26 15_10_53.xml: 1062 (23000): Duplicate entry '425682642023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43068769_230060043068769S010021410000101122023.XML_2024-02-29 15_22_53.xml: 1062 (23000): Duplicate entry '430687692023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43263848_460060043263848S010021410000013122023.XML_2024-03-28 15_11_48.xml: 1062 (23000): Duplicate entry '432638482023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43473823_120020043473823S010021410001136122023.XML_2024-03-11 22_25_50.xml: 1062 (23000): Duplicate entry '434738232023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 43631593_680040043631593S010021410000002122023.XML_2024-02-09 18_03_30.xml: 1062 (23000): Duplicate entry '436315932022' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44585784_800090044585784S010021410000017122023.XML_2024-02-28 12_34_13.xml: 1062 (23000): Duplicate entry '445857842023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44614647_800090044614647S010021410000021122023.XML_2024-02-26 10_25_32.xml: 1062 (23000): Duplicate entry '446146472023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44614647_800090044614647S010021410000027122023.XML_2024-02-26 11_20_45.xml: 1062 (23000): Duplicate entry '446146472023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44614647_800090044614647S010021410000168122023.XML_2024-03-04 17_05_51.xml: 1062 (23000): Duplicate entry '446146472023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44614647_800090044614647S010021410000269122023.XML_2024-03-26 12_50_41.xml: 1062 (23000): Duplicate entry '446146472023' for key 'fin_res.PRIMARY'\n",
      "Error importing data from 44614647_800090044614647S010021410000329122023.XML_2024-03-26 15_20_37.xml: 1062 (23000): Duplicate entry '446146472023' for key 'fin_res.PRIMARY'\n",
      "2023 done\n"
     ]
    }
   ],
   "source": [
    "# import  FinRez\n",
    "import os\n",
    "import xml.etree.ElementTree as ET\n",
    "import mysql.connector\n",
    "\n",
    "# MySQL database connection parameters\n",
    "db_config = {\n",
    "    'user': 'root',\n",
    "    'password': 'MDismydom22!',\n",
    "    'host': 'localhost',\n",
    "    'database': 'businesses_in_ukraine'\n",
    "}\n",
    "\n",
    "\n",
    "def check_finrez_record(cur, FIRM_EDRPOU, D_FILL, PERIOD_YEAR):\n",
    "    # Define the SQL query with parameters\n",
    "    sql_query = \"\"\"\n",
    "    SELECT \n",
    "        CASE \n",
    "            WHEN (\n",
    "                SELECT COUNT(*) \n",
    "                FROM balance b2 \n",
    "                WHERE b2.FIRM_EDRPOU = %s \n",
    "                    AND b2.PERIOD_YEAR = %s\n",
    "                    AND b2.D_FILL > %s\n",
    "            ) > 0 THEN -1\n",
    "            WHEN (\n",
    "                SELECT COUNT(*) \n",
    "                FROM balance b2 \n",
    "                WHERE b2.FIRM_EDRPOU = %s\n",
    "                    AND b2.PERIOD_YEAR = %s\n",
    "            ) = 0 THEN 2\n",
    "            ELSE 1'\n",
    "        END AS result\n",
    "    \"\"\"\n",
    "\n",
    "    # Execute the SQL query with parameters\n",
    "    cur.execute(sql_query, (FIRM_EDRPOU, PERIOD_YEAR, D_FILL, FIRM_EDRPOU, PERIOD_YEAR))\n",
    "\n",
    "    # Fetch the result\n",
    "    result = cur.fetchone()\n",
    "\n",
    "    # Print the result\n",
    "    #if result:\n",
    "    #    print(result[0])\n",
    "    #else:\n",
    "    #    print(\"No result found.\")\n",
    "    \n",
    "    # Close cursor and connection\n",
    "\n",
    "    return result[0]\n",
    "\n",
    "# Call the function with your FIRM_EDRPOU and D_FILL values\n",
    "# check_balance_record(\"your_FIRM_EDRPOU_value\", \"your_D_FILL_value\")\n",
    "\n",
    "\n",
    "def change_date_format(date_str, mtype, b=1):\n",
    "    # Assuming date_str is in the format DDMMYYYY\n",
    "    if mtype == 'MY_DATE':\n",
    "        day = date_str[:2]\n",
    "        month = date_str[2:4]\n",
    "        year = date_str[4:]\n",
    "        # Concatenate in the format YYYYMMDD\n",
    "        if b==1: \n",
    "            new_date_str = year + month + day\n",
    "            return new_date_str\n",
    "        else:\n",
    "            year = int(year)-1\n",
    "            new_date_str = str(year) + month + day\n",
    "            return new_date_str\n",
    "    elif mtype == 'PERIOD_YEAR':\n",
    "        if b==1: \n",
    "            return date_str\n",
    "        else: \n",
    "            return str(int(date_str)-1)\n",
    "        \n",
    "    else:\n",
    "        return date_str\n",
    "\n",
    "\n",
    "# Function to import data from XML file to MySQL\n",
    "def import_xml_to_mysql(xml_folder, table_name):\n",
    "    # Connect to MySQL database\n",
    "    try:\n",
    "        conn = mysql.connector.connect(**db_config)\n",
    "        cursor = conn.cursor()\n",
    "    except mysql.connector.Error as err:\n",
    "        print(f\"Error connecting to MySQL: {err}\")\n",
    "        return\n",
    "\n",
    "    # Iterate through each XML file in the folder\n",
    "    for filename in os.listdir(xml_folder):\n",
    "        if filename.endswith('.xml'):\n",
    "            xml_path = os.path.join(xml_folder, filename)\n",
    "            try:\n",
    "                for i in range(1, 3):\n",
    "\n",
    "                    tree = ET.parse(xml_path)\n",
    "                    root = tree.getroot()\n",
    "                    \n",
    "\n",
    "                    # Construct SQL INSERT statement\n",
    "                    if i == 1:\n",
    "                        columns  = [child.tag for child in root.find('DECLARBODY') if not(child.tag.startswith('A'))]\n",
    "                        PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                        PERIOD_YEAR = str(int(PERIOD_YEAR)-1)\n",
    "                    else:\n",
    "                        columns  = [child.tag for child in root.find('DECLARBODY') if not(child.tag.startswith('B'))]\n",
    "                        PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                        \n",
    "                    columns2  =[child.tag for child in root.find('DECLARHEAD') ]\n",
    "                    placeholders = ', '.join(['%s' for _ in range(len(columns+columns2)+1)])\n",
    "                    #query = f\"INSERT INTO {table_name} ({', '.join(columns+columns2)}) VALUES ({placeholders})\"\n",
    "                    # ['A' + col[1:] if col.startswith('B') else col for col in columns]\n",
    "                    FIRM_EDRPOU = root.find('DECLARBODY').find(\"FIRM_EDRPOU\").text.strip()\n",
    "                    # PERIOD_YEAR = root.find('DECLARHEAD').find(\"PERIOD_YEAR\").text.strip()\n",
    "                    # if i == 1:\n",
    "                    #     ID_YEAR = FIRM_EDRPOU + str(int(PERIOD_YEAR)-1)\n",
    "                    # else:\n",
    "                    #     ID_YEAR = FIRM_EDRPOU + PERIOD_YEAR\n",
    "                    \n",
    "                    ID_YEAR = FIRM_EDRPOU + PERIOD_YEAR\n",
    "                    \n",
    "                    data  = [change_date_format(root.find('DECLARBODY').find(col).text,col,i-1) for col in columns]+[change_date_format(root.find('DECLARHEAD').find(col).text,col,i-1) for col in columns2]\n",
    "                   \n",
    "                    \n",
    "                    # print(root.find('DECLARBODY').find(\"FIRM_EDRPOU\").text)\n",
    "                    \n",
    "                    \n",
    "                        \n",
    "                        \n",
    "                    \n",
    "                    #print(ID_YEAR)\n",
    "                    r_find = check_finrez_record(cursor, FIRM_EDRPOU, root.find('DECLARHEAD').find(\"D_FILL\").text, PERIOD_YEAR)\n",
    "                    #print(r_find)\n",
    "                    \n",
    "                    \n",
    "                    \n",
    "                    if r_find == 2:\n",
    "                        query = f\"INSERT INTO  {table_name} (id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders})\"\n",
    "                    elif r_find == 1:\n",
    "                        query = f\"REPLACE INTO {table_name} (id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders})\" # WHERE FIRM_EDRPOU = '{FIRM_EDRPOU}' AND PERIOD_YEAR = {PERIOD_YEAR}\"\n",
    "                    else:\n",
    "                        continue\n",
    "                        \n",
    "#                     if r_find == 1: #Update\n",
    "#                         func = \"REPLACE INTO\"\n",
    "#                         func2 = \"\"#SET\n",
    "#                         func3 = \"\"#f\"WHERE FIRM_EDRPOU = {FIRM_EDRPOU} AND PERIOD_YEAR = {PERIOD_YEAR}\"\n",
    "#                     elif r_find == 2: # Insert \n",
    "#                         func = \"INSERT INTO\"\n",
    "#                         func2 = \"\"\n",
    "#                         func3 = \"\"\n",
    "#                     else: \n",
    "#                         continue\n",
    "                    \n",
    "                    \n",
    "#                     query = f\" {func} {table_name} {func2} ( id_year, {', '.join(['A' + col[1:] if col.startswith('B') else col for col in columns]+columns2)}) VALUES ({placeholders}) {func3}\"\n",
    "#                     #if r_find == 1: \n",
    "\n",
    "\n",
    "                    #print(query)\n",
    "\n",
    "                    # Extract data from XML and insert into database\n",
    "                    #if i == 1:\n",
    "                     #else:\n",
    "                     #   data  = [change_date_format(root.find('DECLARBODY').find(col).text,col) for col in columns]+[change_date_format(root.find('DECLARHEAD').find(col).text,col) for col in columns2]\n",
    "                    #print(data)\n",
    "                    cursor.execute(query, [ID_YEAR]+data)\n",
    "\n",
    "                    conn.commit()\n",
    "                    #print(f\"Data from {filename} imported successfully.\")\n",
    "                    \n",
    "            except Exception as e:\n",
    "                print(f\"Error importing data from {filename}: {e}\")\n",
    "            \n",
    "            #break\n",
    "    # Close MySQL connection\n",
    "    cursor.close()\n",
    "    conn.close()\n",
    "\n",
    "# Example usage\n",
    "xml_folder_path_2021 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2021\\F-2'\n",
    "xml_folder_path_2022 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2022\\F-2'\n",
    "xml_folder_path_2023 = r'C:\\Users\\Anna\\Documents\\DA\\ukrainian businesses\\Data\\zips all\\2023\\F-2'\n",
    "table_name = 'fin_res'\n",
    "\n",
    "import_xml_to_mysql(xml_folder_path_2021, table_name) \n",
    "print('2021 done')\n",
    "import_xml_to_mysql(xml_folder_path_2022, table_name)\n",
    "print('2022 done')\n",
    "import_xml_to_mysql(xml_folder_path_2023, table_name)\n",
    "print('2023 done')\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "f3b180ca-7b53-404f-b1fe-a09107110232",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.10.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
